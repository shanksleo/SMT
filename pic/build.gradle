apply plugin: 'com.android.application'
apply plugin: 'com.tencent.matrix-plugin'

/*
* //通过之前设定的变量进行设置是application还是library  isModule设定在gradle.proprtties 上
if (isModule.toBoolean()) {
    apply plugin: 'com.android.application'
} else {
    apply plugin: 'com.android.library'
}

*
* */


/*
* android闭包是gradle最重要的配置申明，例如默认的配置信息defaultConfig，包含minSdkVersion最小支持的android版本，versionCode与versionName等。这些配置都与编译息息相关，最好你应该熟悉它们。你实在记不住的话，我这里也有秘籍，AppExtension(https://google.github.io/android-gradle-dsl/current/com.android.build.gradle.AppExtension.html)这里面包含所有的配置项与所代表的意义。
* */
android {
    compileSdkVersion rootProject.ext.android["compileSdkVersion"]
    buildToolsVersion rootProject.ext.android["buildToolsVersion"]
    useLibrary 'org.apache.http.legacy'

    compileOptions {
        targetCompatibility JavaVersion.VERSION_1_8
        sourceCompatibility JavaVersion.VERSION_1_8
    }


    defaultConfig {
        applicationId "com.open.fire.pic"
        minSdkVersion rootProject.ext.android["minSdkVersion"]
        targetSdkVersion rootProject.ext.android["targetSdkVersion"]
        versionCode rootProject.ext.android["versionCode"]
        versionName rootProject.ext.android["versionName"]
        testInstrumentationRunner rootProject.ext.dependencies["androidJUnitRunner"]

    }

    defaultConfig {
        multiDexEnabled true
    }


    buildTypes {
        debug {
            if (isOK.toBoolean()){
                buildConfigField "boolean", "LOG_DEBUG", "true"
            } else{
                buildConfigField "boolean", "LOG_DEBUG", "false"
            }
            buildConfigField "boolean", "USE_CANARY", "true"
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        release {
            //buildConfigField "boolean", "USE_CANARY", "false"  第一个：确定值的类型，第二个：指定key的名字，第三个：传值

            //buildConfigField "String", "SERVER_HOST", "\"200.200.200.50/\""
            ////取值
            //String host = BuildConfig.SERVER_HOST;


            buildConfigField "boolean", "LOG_DEBUG", "false"
            buildConfigField "boolean", "USE_CANARY", "false"
            minifyEnabled true   //打开混淆
            shrinkResources true  //用shrinkResources true开启资源压缩后，所有未被使用的资源默认被移除。
            zipAlignEnabled true  //zipAlign可以让安装包中的资源按4字节对齐，这样可以减少应用在运行时的内存消耗
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    lintOptions {
        disable 'InvalidPackage'
        disable "ResourceType"
        abortOnError false
    }
}
/*
*
这里的dependencies用来申明项目所依赖的第三方库，而这些库的获取来源无需再次申明，
因为我们已经在之前的根目录的build.gradle中的allprojects闭包中进行了申明。再者之前的ext全局变量也可以在这里使用。
* */
dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')

    //support
    implementation rootProject.ext.dependencies["cardview-v7"]

    //tools
    //注意 Arms 核心库现在并不会依赖某个 EventBus, 要想使用 EventBus, 还请在项目中自行依赖对应的 EventBus
    //现在支持两种 EventBus, greenrobot 的 EventBus 和畅销书 《Android源码设计模式解析与实战》的作者 何红辉 所作的 AndroidEventBus
    //依赖后 Arms 会自动检测您依赖的 EventBus 并自动注册
    //建议使用 AndroidEventBus, 特别是组件化项目, 原因请看 https://github.com/hehonghui/AndroidEventBus/issues/49
    //这种做法可以让使用者有自行选择三方库的权利, 并且还可以减轻 Arms 的体积
    implementation rootProject.ext.dependencies["androideventbus"]
//    implementation rootProject.ext.dependencies["eventbus"]

    annotationProcessor rootProject.ext.dependencies["dagger2-compiler"]
    implementation rootProject.ext.dependencies["progressmanager"]
    implementation rootProject.ext.dependencies["retrofit-url-manager"]
    implementation rootProject.ext.dependencies["lifecyclemodel"]

    //view
    annotationProcessor(rootProject.ext.dependencies["butterknife-compiler"]) {
        exclude module: 'support-annotations'
    }
    implementation rootProject.ext.dependencies["paginate"]



    //arms
    implementation project(':arms')
    implementation project(':autosize')
    //Github 仓库上最新的 Demo 具有下一个版本的新特性, 所以依赖最新的远程库会出现版本不兼容的情况, 详情请查看 https://github.com/JessYanCoding/MVPArms/wiki/Issues#2
//    implementation 'me.jessyan:arms:2.5.0'

    //Arms 核心库不再包含 AndroidAutoLayout, 现在可自行选择屏幕适配方案, 不想使用 AndroidAutoLayout 就不要依赖 arms-autolayout
//    implementation 'me.jessyan:arms-autolayout:2.5.0'

    //现在已经将 Demo 中的屏幕适配框架从 AndroidAutoLayout 替换为 AndroidAutoSize, AndroidAutoLayout 和 AndroidAutoSize 可以在项目中共存
    //所以旧项目只要依赖 arms-autolayout 即可兼容之前的旧页面, 新页面可以使用 AndroidAutoSize 进行适配, 等有时间了再将旧页面全部替换为 AndroidAutoSize
//    implementation rootProject.ext.dependencies["autosize"]

    //Arms 核心库不再包含 Glide, 想使用其他图片加载框架或者想自行扩展 ImageLoaderStrategy 就不要依赖 arms-imageloader-glide
    //依赖 arms-imageloader-glide 后还需要在 GlobalConfiguration 中手动注册 GlideImageLoaderStrategy
    implementation 'me.jessyan:arms-imageloader-glide:2.5.0'

    //test
    testImplementation rootProject.ext.dependencies["junit"]
    debugImplementation rootProject.ext.dependencies["canary-debug"]
    releaseImplementation rootProject.ext.dependencies["canary-release"]
    testImplementation rootProject.ext.dependencies["canary-release"]
    implementation 'com.xdandroid:hellodaemon:+'

    implementation group: "com.tencent.matrix", name: "matrix-android-lib", version: MATRIX_VERSION, changing: true
    implementation group: "com.tencent.matrix", name: "matrix-android-commons", version: MATRIX_VERSION, changing: true
    implementation group: "com.tencent.matrix", name: "matrix-trace-canary", version: MATRIX_VERSION, changing: true
    implementation group: "com.tencent.matrix", name: "matrix-resource-canary-android", version: MATRIX_VERSION, changing: true
    implementation group: "com.tencent.matrix", name: "matrix-resource-canary-common", version: MATRIX_VERSION, changing: true
    implementation group: "com.tencent.matrix", name: "matrix-io-canary", version: MATRIX_VERSION, changing: true
    implementation group: "com.tencent.matrix", name: "matrix-sqlite-lint-android-sdk", version: MATRIX_VERSION, changing: true


    implementation rootProject.ext.dependencies["QPM"]
}
matrix {
    trace {
        enable = true	//if you don't want to use trace canary, set false
        baseMethodMapFile = "${project.buildDir}/matrix_output/Debug.methodmap"
        blackListFile = "${project.projectDir}/matrixTrace/blackMethodList.txt"
    }
}



//

// https://mp.weixin.qq.com/s?__biz=MzIzNTc5NDY4Nw==&mid=2247483840&idx=1&sn=f4392bba9a85d79d84e823f2b83aa668&chksm=e8e0f850df9771462447aec9c7275b70e576bd17f20c7eeb703116eb1c23fe534ad796996515&token=1041803379&lang=zh_CN#rd